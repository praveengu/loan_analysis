# -*- coding: utf-8 -*-
"""trainproject.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nS-aI0us-frQmz2qXdLde22AEnXeNc9y
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data=pd.read_csv(r"/content/drive/My Drive/data model.csv")
data.info()

data=data.drop(['verification_status_joint','dti_joint','annual_inc_joint','addr_state','emp_length','id','initial_list_status','member_id',
                'mths_since_last_major_derog','policy_code','pub_rec','zip_code','il_util','open_il_12m','open_il_24m','mths_since_rcnt_il',
                'max_bal_bc','open_rv_12m','open_rv_24m','all_util','total_bal_il','inq_fi','total_cu_tl','inq_last_12m','last_credit_pull_d',
                'mths_since_last_record','open_acc_6m','open_il_6m','desc','title','tot_coll_amt','acc_now_delinq','collections_12_mths_ex_med',
                'revol_util','next_pymnt_d','last_pymnt_d','inq_last_6mths','mths_since_last_delinq'],axis=1)

data.info()

data.isnull().sum()

data["emp_title"].fillna(method="ffill",inplace=True)
data["emp_title"][0]="Ryder"
data.isnull().sum()

data["tot_cur_bal"].plot.hist()

data["total_rev_hi_lim"].plot.hist()

data["tot_cur_bal"].fillna(data["tot_cur_bal"].median(),
    inplace=True)
data["total_rev_hi_lim"].fillna(data["total_rev_hi_lim"].median(),
    inplace=True)
data.isnull().sum()

data.info()

from sklearn import preprocessing
label_encoder=preprocessing.LabelEncoder()
data["grade"]=label_encoder.fit_transform(data["grade"])
data["term"]=label_encoder.fit_transform(data["term"])
data["sub_grade"]=label_encoder.fit_transform(data["sub_grade"])
data["emp_title"]=label_encoder.fit_transform(data["emp_title"])
data["home_ownership"]=label_encoder.fit_transform(data["home_ownership"])
data["verification_status"]=label_encoder.fit_transform(data["verification_status"])
data["pymnt_plan"]=label_encoder.fit_transform(data["pymnt_plan"])
data["purpose"]=label_encoder.fit_transform(data["purpose"])
data["issue_d"]=label_encoder.fit_transform(data["issue_d"])
data["earliest_cr_line"]=label_encoder.fit_transform(data["earliest_cr_line"])
data["application_type"]=label_encoder.fit_transform(data["application_type"])
data.info()

y=data["default_ind"]
x=data.drop(["default_ind"],axis=1)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)

from sklearn.linear_model import LogisticRegression
model_logr=LogisticRegression()
model_logr.fit(x_train,y_train)
y_pred=model_logr.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

from sklearn.neighbors import KNeighborsClassifier
model_knn=KNeighborsClassifier()
model_knn.fit(x_train,y_train)
y_pred=model_knn.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

from sklearn.tree import DecisionTreeClassifier
model_dectr=DecisionTreeClassifier()
model_dectr.fit(x_train,y_train)
y_pred=model_dectr.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
model_rf=RandomForestClassifier()
model_rf.fit(x_train,y_train)
y_pred=model_rf.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

from sklearn.naive_bayes import GaussianNB
model_nvbse=GaussianNB()
model_nvbse.fit(x_train,y_train)
y_pred=model_nvbse.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))


import matplotlib.pyplot as plt
algo=["KNN","Naive","Logistic","Decision Tree"]
per=[96.32,99.73,98.60,27.60]
c=["red","blue","cyan","brown"]
plt.bar(algo,per,color=c)
